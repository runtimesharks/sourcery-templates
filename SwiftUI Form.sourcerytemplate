{"version":3,"instance":"eyJpZCI6IjUxNjM1NzMwLUM5MUEtNDk5NS05NDhCLTM0RkYwQUVGRURBOSIsImRlc2NyaXB0aW9uIjoiR2VuZXJhdGVzIFN3aWZ0VUkgZm9ybSBmcm9tIGFyYml0cmFyeSBzdHJ1Y3RcblxuU2ltcGxpZmljYXRpb24gb2YgaHR0cHM6XC9cL2dpdGh1Yi5jb21cL2tyenlzenRvZnphYmxvY2tpXC9BdXRvbWF0aWNTZXR0aW5ncyIsImNvbnRlbnQiOiJ7JSBtYWNybyBidWlsZEZvcm1FbnRyeSBzdHJ1Y3QgdmFyaWFibGUgcGFyZW50VmFyaWFibGUgJX1cbnslIHR5cGVkIHN0cnVjdCBhcyBTdHJ1Y3QgdmFyaWFibGUgYXMgVmFyaWFibGUgcGFyZW50VmFyaWFibGUgYXMgVmFyaWFibGUgJX1cbnslIHNldCBrZXlQYXRoICV9e3sgc3RydWN0Lm5hbWV8bG93ZXJGaXJzdExldHRlciB9fXslIGlmIHBhcmVudFZhcmlhYmxlICV9Lnt7IHBhcmVudFZhcmlhYmxlLm5hbWUgfX17JSBlbmRpZiAlfS57eyB2YXJpYWJsZS5uYW1lIH19eyUgZW5kc2V0ICV9XG57JSBzZXQgYmluZGluZyAlfSR7eyBrZXlQYXRoIH19eyUgZW5kc2V0ICV9XG57JSBpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiU3RyaW5nXCIgJX1cbiAgICAgICAgICAgICAgICB7JSBpZiBwYXJlbnRWYXJpYWJsZSAlfSAgICB7JSBlbmRpZiAlfVRleHRGaWVsZChcInt7IHZhcmlhYmxlLm5hbWV8dXBwZXJGaXJzdExldHRlciB9fVwiLCB0ZXh0OiB7eyBiaW5kaW5nIH19KVxueyUgZW5kaWYgJX1cbnslIGlmIHZhcmlhYmxlLnR5cGVOYW1lLm5hbWUgPT0gXCJCb29sXCIgJX1cbiAgICAgICAgICAgICAgICB7JSBpZiBwYXJlbnRWYXJpYWJsZSAlfSAgICB7JSBlbmRpZiAlfVRvZ2dsZShcInt7IHZhcmlhYmxlLm5hbWUgfX1cIiwgaXNPbjoge3sgYmluZGluZyB9fSlcbnslIGVuZGlmICV9XG57JSBpZiB2YXJpYWJsZS50eXBlTmFtZS5uYW1lID09IFwiSW50XCIgJX1cbnslIHNldCByYW5nZSAlfXslIGlmIHZhcmlhYmxlLmFubm90YXRpb25zLnJhbmdlICV9e3sgdmFyaWFibGUuYW5ub3RhdGlvbnMucmFuZ2UgfX17JSBlbHNlICV9MC4uLjk5OXslIGVuZGlmICV9eyUgZW5kc2V0ICV9XG4gICAgICAgICAgICAgICAgeyUgaWYgcGFyZW50VmFyaWFibGUgJX0gICAgeyUgZW5kaWYgJX1TdGVwcGVyKFwie3sgdmFyaWFibGUubmFtZXx1cHBlckZpcnN0TGV0dGVyIH19OiBcXCh7eyBrZXlQYXRoIH19KVwiLCB2YWx1ZToge3sgYmluZGluZyB9fSwgaW46IHt7IHJhbmdlIH19KVxueyUgZW5kaWYgJX1cbnslIGVuZG1hY3JvICV9XG5cbnslIG1hY3JvIGNyZWF0ZVJvd3Mgc3RydWN0IHZhcmlhYmxlICV9XG57JSB0eXBlZCBzdHJ1Y3QgYXMgU3RydWN0IHZhcmlhYmxlIGFzIFZhcmlhYmxlICV9XG57JSBjYWxsIGJ1aWxkRm9ybUVudHJ5IHN0cnVjdCB2YXJpYWJsZSBuaWwgJX1cbnslIGZvciBpbm5lclN0cnVjdCBpbiB0eXBlcy5zdHJ1Y3RzIHdoZXJlIGlubmVyU3RydWN0LmxvY2FsTmFtZSA9PSB2YXJpYWJsZS50eXBlLmxvY2FsTmFtZSAlfVxuICAgICAgICAgICAgICAgIFNlY3Rpb24oaGVhZGVyOiBUZXh0KFwie3sgaW5uZXJTdHJ1Y3QubG9jYWxOYW1lIH19XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHslIGZvciBpbm5lclZhcmlhYmxlIGluIGlubmVyU3RydWN0LnZhcmlhYmxlcyAlfVxuICAgICAgICAgICAgICAgICAgICAgICAgeyUgY2FsbCBidWlsZEZvcm1FbnRyeSBzdHJ1Y3QgaW5uZXJWYXJpYWJsZSB2YXJpYWJsZSAlfVxuICAgICAgICAgICAgICAgICAgICB7JSBlbmRmb3IgJX1cbiAgICAgICAgICAgICAgICB9XG57JSBlbmRmb3IgJX1cbnslIGVuZG1hY3JvICV9XG5cbnslIGZvciBzdHJ1Y3QgaW4gdHlwZXMuc3RydWN0cyB3aGVyZSBub3Qgc3RydWN0LnBhcmVudCAlfVxueyUgbmV3bGluZSAlfXN0cnVjdCB7eyBzdHJ1Y3QubmFtZSB9fVZpZXc6IFZpZXcge1xuICAgIEBTdGF0ZSBwcml2YXRlIHZhciB7eyBzdHJ1Y3QubmFtZXxsb3dlckZpcnN0TGV0dGVyIH19ID0ge3sgc3RydWN0Lm5hbWUgfX0oKVxuXG4gICAgdmFyIGJvZHk6IHNvbWUgVmlldyB7XG4gICAgICAgIE5hdmlnYXRpb25WaWV3IHtcbiAgICAgICAgICAgIEZvcm0ge1xuICAgICAgICAgICAgeyUgZm9yIHZhcmlhYmxlIGluIHN0cnVjdC52YXJpYWJsZXMgJX1cbiAgICAgICAgICAgICAgICB7JSBjYWxsIGNyZWF0ZVJvd3Mgc3RydWN0IHZhcmlhYmxlICV9XG4gICAgICAgICAgICB7JSBlbmRmb3IgJX1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5uYXZpZ2F0aW9uQmFyVGl0bGUoXCJ7eyBzdHJ1Y3QubmFtZSB9fSBTZXR0aW5nc1wiKVxuICAgICAgICAgICAgLm5hdmlnYXRpb25CYXJUaXRsZURpc3BsYXlNb2RlKC5pbmxpbmUpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbnN0cnVjdCB7eyBzdHJ1Y3QubmFtZSB9fVZpZXdfUHJldmlld3M6IFByZXZpZXdQcm92aWRlciB7XG4gICAgc3RhdGljIHZhciBwcmV2aWV3czogc29tZSBWaWV3IHtcbiAgICAgICAge3sgc3RydWN0Lm5hbWUgfX1WaWV3KClcbiAgICB9XG59XG57JSBlbmRmb3IgJX1cbiIsInZlcnNpb24iOjMsImZhdm9yaXRlIjp0cnVlLCJhdXRob3IiOiLFgXVrYXN6IEt1Y3pib3Jza2kiLCJnZW5lcmF0ZWRDb2RlIjoiXG5zdHJ1Y3QgRGF0YU1vZGVsVmlldzogVmlldyB7XG4gICAgQFN0YXRlIHByaXZhdGUgdmFyIGRhdGFNb2RlbCA9IERhdGFNb2RlbCgpXG5cbiAgICB2YXIgYm9keTogc29tZSBWaWV3IHtcbiAgICAgICAgTmF2aWdhdGlvblZpZXcge1xuICAgICAgICAgICAgRm9ybSB7XG4gICAgICAgICAgICAgICAgU2VjdGlvbihoZWFkZXI6IFRleHQoXCJTZWN0aW9uT25lXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIFRleHRGaWVsZChcIlRpdGxlXCIsIHRleHQ6ICRkYXRhTW9kZWwub25lLnRpdGxlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBUb2dnbGUoXCJpc0RlYnVnTW9kZVwiLCBpc09uOiAkZGF0YU1vZGVsLmlzRGVidWdNb2RlKVxuICAgICAgICAgICAgICAgIFNlY3Rpb24oaGVhZGVyOiBUZXh0KFwiU2VjdGlvblR3b1wiKSkge1xuICAgICAgICAgICAgICAgICAgICBTdGVwcGVyKFwiQ291bnQ6IFxcKGRhdGFNb2RlbC50d28uY291bnQpXCIsIHZhbHVlOiAkZGF0YU1vZGVsLnR3by5jb3VudCwgaW46IDEuLi4xMClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAubmF2aWdhdGlvbkJhclRpdGxlKFwiRGF0YU1vZGVsIFNldHRpbmdzXCIpXG4gICAgICAgICAgICAubmF2aWdhdGlvbkJhclRpdGxlRGlzcGxheU1vZGUoLmlubGluZSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuc3RydWN0IERhdGFNb2RlbFZpZXdfUHJldmlld3M6IFByZXZpZXdQcm92aWRlciB7XG4gICAgc3RhdGljIHZhciBwcmV2aWV3czogc29tZSBWaWV3IHtcbiAgICAgICAgRGF0YU1vZGVsVmlldygpXG4gICAgfVxufSIsInVybCI6IiIsInJlZ2VuZXJhdGlvbkNvdW50ZXIiOjEsImZpbGVVUkwiOiJmaWxlOlwvXC9cL1VzZXJzXC9yb2xhbmRcL19Xb3JrXC9SdW50aW1lU2hhcmtzXC9QZXJzb25hbFwvc291cmNlcnktdGVtcGxhdGVzXC9Td2lmdFVJJTIwRm9ybS5zb3VyY2VyeXRlbXBsYXRlIiwicnVuQ29uZmlndXJhdGlvbiI6InNlbGVjdGlvbiIsInNhbXBsZUNvZGUiOiJzdHJ1Y3QgRGF0YU1vZGVsIHtcblxuICAgIHN0cnVjdCBTZWN0aW9uT25lIHtcbiAgICAgICAgdmFyIHRpdGxlOiBTdHJpbmcgPSBcIlRlc3RcIlxuICAgIH1cbiAgICBcbiAgICBzdHJ1Y3QgU2VjdGlvblR3byB7XG4gICAgICAgIFwvXC8gc291cmNlcnk6IHJhbmdlID0gMS4uLjEwXG4gICAgICAgIHZhciBjb3VudDogSW50ID0gMVxuICAgIH1cbiAgICBcbiAgICB2YXIgb25lOiBTZWN0aW9uT25lID0gLmluaXQoKVxuICAgIHZhciBpc0RlYnVnTW9kZTogQm9vbCA9IHRydWVcbiAgICB2YXIgdHdvOiBTZWN0aW9uVHdvID0gLmluaXQoKVxuXG59IiwiaXNMb2NrZWQiOmZhbHNlLCJraW5kIjoic3RlbmNpbCIsInRyaW1XaGl0ZXNwYWNlcyI6dHJ1ZSwibmFtZSI6IlN3aWZ0VUkgRm9ybSIsImluc2VydGlvbk1vZGUiOiJlbmRPZkZpbGUifQ=="}